*Spring Cloud Config


*S.O.L.I.D
SRP(Single responsibility principle) - Uma classe deve ter um, e somente um, motivo para mudar.

OCP(Open/closed principle) - Deve ser capaz de estender um comportamento de uma classe sem a necessidade de
modificá-lo.

LSP(Liskov substitution principle) - As classes derivadas devem ser substituíveis por suas classes bases.

ISP(Interface segregation principle) - Muitas interfaces específicas são melhores do que uma interface única geral.

DIP(Dependency inversion principle) - Dependa de abstrações e não de implementações.


*Design Patterns
Builder - padrão de projeto criacional, que permite a construção de objetos complexos passo a passo.

Facade - padrão de projeto estrutural, que serve para esconder complexidades do sistema  e gerenciar o ciclo de vida
 do sistema

Decorator - padrão de projeto estrutural, que permite novos compartamentos ao objeto sem modificar seu codigo.

Strategy - padrão de projeto comportamental, usado para fornecer aos usuários uma maneira de alterar o comportamento de
 uma classe sem estendê-la.

Observer - padrão de projeto comportamental que permite que um objeto notifique outros objetos sobre alterações em seu
estado.


Spring cloud
https://emmanuelneri.com.br/2018/07/09/configuracoes-distribuidas-com-spring-cloud-config/
https://medium.com/dev-cave/spring-cloud-config-48e423446ed8

SOLID
https://medium.com/thiago-aragao/solid-princ%C3%ADpios-da-programa%C3%A7%C3%A3o-orientada-a-objetos-ba7e31d8fb25
https://medium.com/desenvolvendo-com-paixao/o-que-%C3%A9-solid-o-guia-completo-para-voc%C3%AA-entender-os-5-princ%C3%ADpios-da-poo-2b937b3fc530

Design patterns
https://www.tutorialspoint.com/design_pattern/builder_pattern.htm
https://www.journaldev.com/1425/builder-design-pattern-in-java
https://howtodoinjava.com/design-patterns/creational/builder-pattern-in-java/
https://refactoring.guru/pt-br/design-patterns/builder/java/example

https://www.tutorialspoint.com/design_pattern/facade_pattern.htm
https://www.baeldung.com/java-facade-pattern
https://refactoring.guru/pt-br/design-patterns/facade/java/example

https://www.geeksforgeeks.org/decorator-design-pattern-in-java-with-example/
https://www.baeldung.com/java-decorator-pattern
https://refactoring.guru/pt-br/design-patterns/decorator/java/example

https://medium.com/collabcode/strategy-padr%C3%B5es-de-projeto-em-java-43889a3afc5a

https://howtodoinjava.com/design-patterns/behavioral/observer-design-pattern/
https://www.tutorialspoint.com/design_pattern/observer_pattern.htm
https://refactoring.guru/pt-br/design-patterns/observer/java/example

map         = retorna objeto (Carteira)
flatmap     = retorna mono (Mono<Carteira>)
flatmapmany = retorna flux (Flux<Carteira>)


